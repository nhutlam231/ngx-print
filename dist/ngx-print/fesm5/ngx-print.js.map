{"version":3,"file":"ngx-print.js.map","sources":["ng://ngx-print/lib/ngx-print.directive.ts","ng://ngx-print/lib/ngx-print.module.ts"],"sourcesContent":["import { Directive, HostListener, Input } from \"@angular/core\";\r\n@Directive({\r\n  selector: \"button[ngxPrint]\"\r\n})\r\nexport class NgxPrintDirective {\r\n\r\n  public _printStyle = [];\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() printSectionId: string;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() printTitle: string;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() useExistingCss = false;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input()\r\n  set printStyle(values: { [key: string]: { [key: string]: string } }) {\r\n    for (let key in values) {\r\n      if (values.hasOwnProperty(key)) {\r\n      this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\r\n      }\r\n    }\r\n    this.returnStyleValues();\r\n  }\r\n\r\n  /**\r\n  * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\r\n  *\r\n  * @memberof NgxPrintDirective\r\n  */\r\n  @Input() printDelay: number = 0;\r\n\r\n\r\n/**\r\n *\r\n *\r\n * @returns the string that create the stylesheet which will be injected\r\n * later within <style></style> tag.\r\n *\r\n * -join/replace to transform an array objects to css-styled string\r\n *\r\n * @memberof NgxPrintDirective\r\n */\r\npublic returnStyleValues() {\r\n  return `<style> ${this._printStyle.join(' ').replace(/,/g,';')} </style>`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @returns html for the given tag\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  private _styleSheetFile = '';\r\n\r\n  /**\r\n   * @memberof NgxPrintDirective\r\n   * @param cssList\r\n   */\r\n  @Input()\r\n  set styleSheetFile(cssList: string) {\r\n    let linkTagFn = cssFileName =>\r\n      `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\r\n    if (cssList.indexOf(',') !== -1) {\r\n      const valueArr = cssList.split(',');\r\n      for (let val of valueArr) {\r\n        this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\r\n      }\r\n    } else {\r\n      this._styleSheetFile = linkTagFn(cssList);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns string which contains the link tags containing the css which will\r\n   * be injected later within <head></head> tag.\r\n   *\r\n   */\r\n  private returnStyleSheetLinkTags() {\r\n    return this._styleSheetFile;\r\n  }\r\n  private getElementTag(tag: keyof HTMLElementTagNameMap): string {\r\n    const html: string[] = [];\r\n    const elements = document.getElementsByTagName(tag);\r\n    for (let index = 0; index < elements.length; index++) {\r\n      html.push(elements[index].outerHTML);\r\n    }\r\n    return html.join('\\r\\n');\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @HostListener('click')\r\n  public print(): void {\r\n    let printContents, popupWin, styles = '', links = '';\r\n\r\n    if(this.useExistingCss) {\r\n      styles = this.getElementTag('style');\r\n      links = this.getElementTag('link');\r\n    }\r\n\r\n    printContents = document.getElementById(this.printSectionId).innerHTML;\r\n    popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=auto,width=auto\");\r\n    popupWin.document.open();\r\n    popupWin.document.write(`\r\n      <html>\r\n        <head>\r\n          <title>${this.printTitle ? this.printTitle : \"\"}</title>\r\n          ${this.returnStyleValues()}\r\n          ${this.returnStyleSheetLinkTags()}\r\n          ${styles}\r\n          ${links}\r\n        </head>\r\n        <body>\r\n          ${printContents}\r\n          <script defer>\r\n            function triggerPrint(event) {\r\n              window.removeEventListener('load', triggerPrint, false);\r\n              setTimeout(() => {\r\n                window.print();\r\n                setTimeout(() => window.close(), 0);\r\n              }, ${this.printDelay});\r\n            }\r\n            window.addEventListener('load', triggerPrint, false);\r\n          </script>\r\n        </body>\r\n      </html>`);\r\n    popupWin.document.close();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxPrintDirective } from './ngx-print.directive';\r\n\r\n@NgModule({\r\n  declarations: [NgxPrintDirective],\r\n  imports: [\r\n  ],\r\n  exports: [NgxPrintDirective]\r\n})\r\nexport class NgxPrintModule { }\r\n"],"names":["tslib_1.__values"],"mappings":"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"}
